import {PrismaClient} from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  // On purge la database
  await prisma.user.deleteMany();
  await prisma.backup.deleteMany();

  // On remplie la db pour les challenges
  const graphQlPassword = 'Pa$$w0rd!';
  const graphQlHash = await bcrypt.hash(graphQlPassword, 10);
  const adminPassword = '@dM1nPa$$w0rd?123';
  const adminHash = await bcrypt.hash(adminPassword, 10);

  await prisma.backup.create({
    data: {
      id: 2,
      name: 'graphql',
      email: 'graphql@exemple.com',
      password: graphQlPassword,
      flag: 'flag{graphql_is_awesome}',
    },
  });

  await prisma.user.create({
    data: {
      id: 2,
      name: 'graphql',
      email: 'graphql@exemple.com',
      password: graphQlHash,
    },
  });
  await prisma.user.create({
    data: {
      id: 1,
      name: 'admin',
      email: 'admin@exemple.com',
      password: adminHash,
    },
  });

  const backup = await prisma.backup.findMany();
  console.log('backup :', backup);
  const users = await prisma.user.findMany();
  console.log('users :', users);
}

main()
  .catch((e) => {
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
