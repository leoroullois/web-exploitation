import {
  ApolloServerPluginDrainHttpServer, ApolloServerPluginLandingPageLocalDefault
} from 'apollo-server-core';
import { ApolloServer } from 'apollo-server-express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import express from 'express';
import http from 'http';

import { context } from './context';
import { schema } from './schema';

const app = express();
const corsOption = {
  origin: ["http://localhost:3000", "https://studio.apollographql.com"],
  credentials: true,
};

app.use(cors(corsOption));

app.use(cookieParser());

app.use((req, _, next) => {
  const { token } = req.cookies;
  if(token) {
    console.log("[TOKEN] : ", token);
  }
  next();
});

const httpServer = http.createServer(app);

export const server = new ApolloServer({
  schema,
  context,
  csrfPrevention: true,
  introspection: true,
  plugins: [
    ApolloServerPluginLandingPageLocalDefault(),
    ApolloServerPluginDrainHttpServer({ httpServer }),
  ],
});

const port = process.env.PORT || 5000;
server
  .start()
  .then(() => {
    server.applyMiddleware({ app, path: "/", cors: false });
    return new Promise<void>((resolve) =>
      httpServer.listen({ port }, resolve)
    );
  })
  .then(() => {
    console.log("ğŸš€ Server ready at ", httpServer.address());
  });

