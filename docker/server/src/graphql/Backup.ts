import { extendType, intArg, nonNull, objectType, stringArg } from 'nexus';

export const Backup = objectType({
  name: "Backup",
  definition(t) {
    t.nonNull.int("id");
    t.nonNull.string("name");
    t.nonNull.string("email");
    t.nonNull.string("password");
    t.nonNull.string("flag");
  },
});

export const BackupQuery = extendType({
  type: "Query",
  definition(t) {
    t.nonNull.list.nonNull.field("backup", {
      type: "Backup",
      async resolve(_, __, ctx, ___) {
        // if (!ctx.userId) {
        //    throw new Error("Not authenticated");
        // }
        return ctx.prisma.backup.findMany();
      },
    });
  },
});

export const BackupMutation = extendType({
  type: "Mutation",
  definition(t) {
    t.field("deleteUserFromBackup", {
      type: "Backup",
      args: {
        id: nonNull(intArg()),
      },
      resolve: async (parent, args, ctx, info) => {
        const users = await ctx.prisma.backup.delete({
          where: {
            id: args.id,
          }
        });
        console.log(users);
        return null;
      },
    });
  },
});

