import { extendType, nonNull, objectType, stringArg } from 'nexus';

export const User = objectType({
  name: "User",
  definition(t) {
    t.nonNull.int("id");
    t.nonNull.string("name");
    t.nonNull.string("email");
  },
});

export const UserQuery = extendType({
  type: "Query",
  definition(t) {
    t.nonNull.list.nonNull.field("users", {
      type: "User",
      resolve: async (parent, args, ctx, info) => {
        // if (!ctx.userId) {
        //    throw new Error("Not authenticated");
        // }
        return ctx.prisma.user.findMany();
      },
    });
  },
});

export const UserMutation = extendType({
  type: "Mutation",
  definition(t) {
    t.field("deleteUser", {
      type: "User",
      resolve: async (parent, args, ctx, info) => {
        const users = await ctx.prisma.user.deleteMany();
        console.log(users);
        return null;
      },
    });
  },
});

