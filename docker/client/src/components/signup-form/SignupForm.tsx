import { gql, useMutation } from "@apollo/client";
import FormError from "@common/form-error/FormError";
import { authAtom } from "@store/auth";
import clsx from "clsx";
import { useAtom } from "jotai";
import { useRouter } from "next/router";
import React, { useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import { IoEye, IoEyeOff } from "react-icons/io5"

type Inputs = {
  name: string;
  email: string;
  password: string;
};

const SIGNUP_MUTATION = gql`
mutation($name: String!, $email: String!, $password: String!) {
  signup(name: $name, email: $email, password: $password) {
    token
    user {
      id
    }
  }
}
`;
const SignupForm = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();

  const [signup, { error, loading }] = useMutation(SIGNUP_MUTATION);

  const router = useRouter();

  const [isAuthenticated, setIsAuthenticated] = useAtom(authAtom);

  const onSubmit: SubmitHandler<Inputs> = (data) => {
    console.log(data);
    signup({
      variables: data,
      onCompleted: ({ signup }) => {
        console.log(signup);
        setIsAuthenticated(true);
        router.push("/");
      },
      onError: (error) => {
        console.log(error);
        setIsAuthenticated(false);
      },
    },
    )
  }

  const [showPassword, setShowPassword] = useState(false);

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className='flex flex-col mx-auto w-96 gap-y-5'
    >
      <label htmlFor='email' className='flex flex-col gap-y-2'>
        <span
          className={clsx(
            "text-xl font-bold",
            "after:content-['*'] after:ml-1 after:text-red-500"
          )}
        >
          Email
        </span>
        <input
          id='email'
          type='email'
          className={clsx(
            "px-4 py-2 rounded-sm outline-none border border-gray-300 shadow-sm duration-100",
            "focus:border-transparent focus:ring-4",
            {
              "focus:ring-blue-300": !errors.email,
              "focus:ring-red-300": !!errors.email,
            }
          )}
          placeholder='example@email.com'
          {...register("email", {
            required: true,
            pattern:
              /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
          })}
        />
        <FormError
          condition={!!errors.email && errors.email.type === "required"}
          text='Email is required'
        />
        <FormError
          condition={!!errors.email && errors.email.type === "pattern"}
          text='Please check your email'
        />
      </label>
      <label htmlFor='name' className='flex flex-col gap-y-2'>
        <span
          className={clsx(
            "text-xl font-bold",
            "after:content-['*'] after:ml-1 after:text-red-500"
          )}
        >
          Name
        </span>
        <input
          id='name'
          className={clsx(
            "px-4 py-2 rounded-sm outline-none border border-gray-300 shadow-sm duration-100",
            "focus:border-transparent focus:ring-4",
            {
              "focus:ring-blue-300": !errors.name,
              "focus:ring-red-300": !!errors.name,
            }
          )}
          type='text'
          placeholder='John Doe'
          {...register("name", {
            required: true,
            maxLength: 30,
          })}
        />
        <FormError
          condition={!!errors.name && errors.name.type === "required"}
          text='Name is required'
        />
        <FormError
          condition={!!errors.name && errors.name.type === "maxLength"}
          text='Name length must be less than 30'
        />
      </label>
      <label htmlFor='password' className='flex flex-col gap-y-2'>
        <span
          className={clsx(
            "text-xl font-bold",
            "after:content-['*'] after:ml-1 after:text-red-500"
          )}
        >
          Password
        </span>
        <div className="relative">
          <input
            id='password'
            type={showPassword ? "text" : "password"}
            placeholder='********'
            className={clsx(
              "w-full pl-4 pr-10 py-2 rounded-sm outline-none border border-gray-300 shadow-sm duration-100",
              "focus:border-transparent focus:ring-4",
              {
                "focus:ring-blue-300": !errors.password,
                "focus:ring-red-300": !!errors.password,
              }
            )}

            {...register("password", {
              required: true,
              minLength: 8,
              maxLength: 30,
              // pattern:
              //   /^(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\w\d\s:])([^\s]){8, 16}$/gm,
            })}
          />
          <button onClick={() => setShowPassword(d => !d)} className="absolute right-0 h-full border-none pr-3">
            {
              showPassword ? <IoEyeOff className="text-lg" /> : <IoEye className="text-lg" />
            }
          </button>
        </div>
        <FormError
          condition={
            !!errors.password && errors.password.type === "required"
          }
          text='Password is required'
        />
        <FormError
          condition={
            !!errors.password && errors.password.type === "minLength"
          }
          text='Password length must be at least 8'
        />
        <FormError
          condition={
            !!errors.password && errors.password.type === "maxLength"
          }
          text='Password length must be at most 30'
        />
        <FormError
          condition={
            !!errors.password && errors.password.type === "pattern"
          }
          text='Your passsword should contain uppercase & lowercase letter, digit(s) and special character(s) #$!%*?& .'
        />
      </label>
      <button className='flex items-center justify-center gap-x-5 p-5 font-bold bg-blue-500 rounded' type='submit'>
        {
          !loading ? "Submit" :
            <>
              <div className={clsx("animate-spin relative rounded-full w-6 h-6 border-4 border-l-gray-50 border-gray-50/40")}></div>
              <p>Processing...</p>
            </>
        }
      </button>
      <p>
        {error?.message}
      </p>
    </form >
  );
};

export default SignupForm;

